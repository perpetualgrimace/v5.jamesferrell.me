////////////////////////////////
// jf-grid
////////////////////////////////

/*

My very own grid system!

Demo:
http://codepen.io/perpetualgrimace/pen/BKdqpZ

Table of contents:
1. config
2. scaling the document
3. default grid classes
4. modifier classes
5. debugging

*/


////////////////////////////////
// config
////////////////////////////////

// variables
$breakpoint-s:      $s;
$breakpoint-m:      $l;
$breakpoint-l:      $xxxl;

$max-width:         $max-container-width; // Keep line width in check. If undesired, set to 100% or auto.
$column-count:      12;   // The html in this demo is marked up for 12 columns, but you can make it whatever.
$grid-padding:      $gutter; // REM is recommended here for scaling, but other units work too. Percentages get awkward at large viewports if max-width is set.
$split-amount:      2;    // In a compact grid, $grid-padding is divided by this number. Should be > 2.


////////////////////////////////
// scaling the document
////////////////////////////////

// set font size on html element, then use REM units wherever possible
html {
  font-size: 100%; // 16px

  @media (min-width: $breakpoint-s) {
    font-size: 112.5%; // 18px
  }

  @media (min-width: $breakpoint-l) {
    font-size: 125%; // 20px
  }
}


////////////////////////////////
// default grid classes
////////////////////////////////

// container
.g-container {
  width: 100%; // needed when content isn't wide enough
  max-width: $max-width;
  margin: 0 auto;
  padding: $grid-padding;
}

// main grid
.g-columns {
  @include clearfix; // necessary because floats

  .g-col {
    margin-top: 0;
    box-sizing: border-box;
    float: left;
    width: 100%; // initial
    max-width: 100%;
    padding: $grid-padding;
  }

  // nested columns
  .g-columns {
    margin: -$grid-padding; // offset padding
  }
  @media screen and (min-width: $breakpoint-m) {
    @for $i from 1 through $column-count {
      .g-#{$i} {
        width: #{ $i * (100% / $column-count) };
      }
    }
  }
}


////////////////////////////////
// modifier classes
////////////////////////////////

// double grid width on smaller viewports before collapsing into one
.g-columns.g-doubling {
  @media screen and (min-width: $breakpoint-s) and (max-width: $breakpoint-l - 0.001) {
    @for $i from 1 through ($column-count - 1) {
      .g-#{$i} {
        width: #{ $i * (100% / ($column-count / 2)) };
      }
    }
    // reset width for nested columns
    .g-columns .g-col {
      width: 100% !important;
    }
  }
}

// keep the same column span across all viewports
.g-columns.g-constant {
  margin: $grid-padding; // offset padding
  @for $i from 1 through $column-count {
    .g-#{$i} {
      width: #{ $i * (100% / $column-count) };
    }
  }
}

// compact grid with smaller padding
.g-columns.g-compact {
  // offset smaller column padding by adding padding to the container -- with the power of math!
  padding: $grid-padding - ($grid-padding / $split-amount);

  .g-col {
    padding: $grid-padding / $split-amount;

    .g-columns {
      margin: -($grid-padding / $split-amount);
    }
  }
}

// no gutters
.g-columns.g-gutterless .g-col {
  padding: 0;
}


////////////////////////////////
// debugging
////////////////////////////////

// add .g-debug to parent
.g-debug {
  // container
  .g-container {
    outline: orange solid 2px;
    box-shadow: inset 0 0 0 $gutter rgba(orange, 0.1)
  }
  // column groups and modifiers
  .g-columns {
    outline: blue solid 2px;
    box-shadow: inset 0 0 0 $gutter rgba(blue, 0.1)
  }
  .g-compact {
    outline: purple solid 2px;
    box-shadow: inset 0 0 0 $gutter rgba(purple, 0.1)
  }
  .g-gutterless {
    outline: indigo solid 2px;
    box-shadow: inset 0 0 0 $gutter rgba(indigo, 0.1)
  }
  // individual columns
  .g-col {
    outline: green solid 2px;
    box-shadow: inset 0 0 0 $gutter rgba(green, 0.1)
  }
}
